{"version":3,"sources":["../src/publish.ts"],"names":["errorWhitelist","publish","extensionId","target","asset","logger","GOOGLE_CLIENT_ID","clientId","GOOGLE_CLIENT_SECRET","clientSecret","GOOGLE_REFRESH_TOKEN","refreshToken","process","env","SemanticReleaseError","webStore","token","fetchToken","zipFile","uploadRes","uploadExisting","uploadState","errors","itemError","forEach","err","semanticError","error_detail","error_code","push","AggregateError","publishRes","status","includes","i","length","code","message","statusDetail","warn","name","url"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;AAKA,MAAMA,cAAc,GAAG,CAAC,iCAAD,CAAvB;;AAEA,MAAMC,OAAO,GAAG,OACd;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,MAAf;AAAuBC,EAAAA;AAAvB,CADc,EAEd;AAAEC,EAAAA;AAAF,CAFc,KAGX;AACH,QAAM;AACJC,IAAAA,gBAAgB,EAAEC,QADd;AAEJC,IAAAA,oBAAoB,EAAEC,YAFlB;AAGJC,IAAAA,oBAAoB,EAAEC;AAHlB,MAIFC,OAAO,CAACC,GAJZ;;AAMA,MAAI,CAACX,WAAL,EAAkB;AAChB,UAAM,IAAIY,cAAJ,CACJ,mGADI,EAEJ,gBAFI,CAAN;AAID;;AAED,MAAI,CAACV,KAAL,EAAY;AACV,UAAM,IAAIU,cAAJ,CACJ,6FADI,EAEJ,UAFI,CAAN;AAID;;AAED,QAAMC,QAAQ,GAAG,MAAM,mCAAI;AACzBR,IAAAA,QADyB;AAEzBE,IAAAA,YAFyB;AAGzBP,IAAAA,WAHyB;AAIzBS,IAAAA;AAJyB,GAAJ,CAAvB;AAOA,QAAMK,KAAK,GAAG,MAAMD,QAAQ,CAACE,UAAT,EAApB;AAEA,QAAMC,OAAO,GAAG,+BAAiBd,KAAjB,CAAhB;AACA,QAAMe,SAAS,GAAG,MAAMJ,QAAQ,CAACK,cAAT,CAAwBF,OAAxB,EAAiCF,KAAjC,CAAxB;;AAEA,MAAIG,SAAS,CAACE,WAAV,KAA0B,SAA9B,EAAyC;AACvC,UAAMC,MAA8B,GAAG,EAAvC;AACAH,IAAAA,SAAS,CAACI,SAAV,CAAoBC,OAApB,CAA6BC,GAAD,IAAc;AACxC,YAAMC,aAAa,GAAG,IAAIZ,cAAJ,CACpBW,GAAG,CAACE,YADgB,EAEpBF,GAAG,CAACG,UAFgB,CAAtB;AAIAN,MAAAA,MAAM,CAACO,IAAP,CAAYH,aAAZ;AACD,KAND;AAOA,UAAM,IAAII,uBAAJ,CAAmBR,MAAnB,CAAN;AACD;;AAED,MAAInB,MAAM,KAAK,OAAf,EAAwB;AACtB,UAAM4B,UAAU,GAAG,MAAMhB,QAAQ,CAACd,OAAT,CAAiBE,MAAM,IAAI,SAA3B,EAAsCa,KAAtC,CAAzB;;AAEA,QAAI,CAACe,UAAU,CAACC,MAAX,CAAkBC,QAAlB,CAA2B,IAA3B,CAAL,EAAuC;AACrC,YAAMX,MAA8B,GAAG,EAAvC;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACC,MAAX,CAAkBG,MAAtC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,cAAME,IAAI,GAAGL,UAAU,CAACC,MAAX,CAAkBE,CAAlB,CAAb;AACA,cAAMG,OAAO,GAAGN,UAAU,CAACO,YAAX,CAAwBJ,CAAxB,CAAhB;;AACA,YAAIlC,cAAc,CAACiC,QAAf,CAAwBG,IAAxB,CAAJ,EAAmC;AACjC/B,UAAAA,MAAM,CAACkC,IAAP,CAAa,GAAEH,IAAK,KAAIC,OAAQ,EAAhC;AACD,SAFD,MAEO;AACL,gBAAMZ,GAAG,GAAG,IAAIX,cAAJ,CAAyBuB,OAAzB,EAAkCD,IAAlC,CAAZ;AACAd,UAAAA,MAAM,CAACO,IAAP,CAAYJ,GAAZ;AACD;AACF;;AACD,UAAIH,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuB;AACrB,cAAM,IAAIL,uBAAJ,CAAmBR,MAAnB,CAAN;AACD;AACF;AACF;;AAED,SAAO;AACLkB,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA,GAAG,EAAG,6CAA4CvC,WAAY;AAFzD,GAAP;AAID,CAzED;;eA2EeD,O","sourcesContent":["import SemanticReleaseError from '@semantic-release/error'\nimport AggregateError from 'aggregate-error'\nimport cwu from 'chrome-webstore-upload'\nimport { createReadStream } from 'fs-extra'\n\nimport Context from './@types/context'\nimport PluginConfig from './@types/pluginConfig'\n\nconst errorWhitelist = ['PUBLISHED_WITH_FRICTION_WARNING']\n\nconst publish = async (\n  { extensionId, target, asset }: PluginConfig,\n  { logger }: Context,\n) => {\n  const {\n    GOOGLE_CLIENT_ID: clientId,\n    GOOGLE_CLIENT_SECRET: clientSecret,\n    GOOGLE_REFRESH_TOKEN: refreshToken,\n  } = process.env\n\n  if (!extensionId) {\n    throw new SemanticReleaseError(\n      \"Option 'extensionId' was not included in the publish config. Check the README.md for config info.\",\n      'ENOEXTENSIONID',\n    )\n  }\n\n  if (!asset) {\n    throw new SemanticReleaseError(\n      \"Option 'asset' was not included in the publish config. Check the README.md for config info.\",\n      'ENOASSET',\n    )\n  }\n\n  const webStore = await cwu({\n    clientId,\n    clientSecret,\n    extensionId,\n    refreshToken,\n  })\n\n  const token = await webStore.fetchToken()\n\n  const zipFile = createReadStream(asset)\n  const uploadRes = await webStore.uploadExisting(zipFile, token)\n\n  if (uploadRes.uploadState === 'FAILURE') {\n    const errors: SemanticReleaseError[] = []\n    uploadRes.itemError.forEach((err: any) => {\n      const semanticError = new SemanticReleaseError(\n        err.error_detail,\n        err.error_code,\n      )\n      errors.push(semanticError)\n    })\n    throw new AggregateError(errors)\n  }\n\n  if (target !== 'draft') {\n    const publishRes = await webStore.publish(target || 'default', token)\n\n    if (!publishRes.status.includes('OK')) {\n      const errors: SemanticReleaseError[] = []\n      for (let i = 0; i < publishRes.status.length; i += 1) {\n        const code = publishRes.status[i]\n        const message = publishRes.statusDetail[i]\n        if (errorWhitelist.includes(code)) {\n          logger.warn(`${code}: ${message}`)\n        } else {\n          const err = new SemanticReleaseError(message, code)\n          errors.push(err)\n        }\n      }\n      if (errors.length > 0) {\n        throw new AggregateError(errors)\n      }\n    }\n  }\n\n  return {\n    name: 'Chrome Web Store',\n    url: `https://chrome.google.com/webstore/detail/${extensionId}`,\n  }\n}\n\nexport default publish\n"],"file":"publish.js"}