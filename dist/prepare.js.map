{"version":3,"sources":["../src/prepare.ts"],"names":["prepareManifest","manifestPath","version","logger","manifest","spaces","log","zipFolder","asset","distFolder","zipPath","output","archive","zlib","level","pipe","directory","finalize","prepare","nextRelease","SemanticReleaseError","normalizedDistFolder"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAKA,MAAMA,eAAe,GAAG,CACtBC,YADsB,EAEtBC,OAFsB,EAGtBC,MAHsB,KAInB;AACH,QAAMC,QAAQ,GAAG,2BAAaH,YAAb,CAAjB;AAEA,8BAAcA,YAAd,eAAiCG,QAAjC;AAA2CF,IAAAA;AAA3C,MAAsD;AAAEG,IAAAA,MAAM,EAAE;AAAV,GAAtD;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAW,wBAAX,EAAqCJ,OAArC,EAA8CD,YAA9C;AACD,CAVD;;AAYA,MAAMM,SAAS,GAAG,CAChBC,KADgB,EAEhBC,UAFgB,EAGhBP,OAHgB,EAIhBC,MAJgB,KAKb;AACH,QAAMO,OAAO,GAAG,mBAAQF,KAAR,CAAhB;AACA,QAAMG,MAAM,GAAG,2BAAkBD,OAAlB,CAAf;AACA,QAAME,OAAO,GAAG,uBAAS,KAAT,EAAgB;AAC9BC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AADwB,GAAhB,CAAhB;AAIAF,EAAAA,OAAO,CAACG,IAAR,CAAaJ,MAAb;AAEAC,EAAAA,OAAO,CAACI,SAAR,CAAkBP,UAAlB,EAA8B,KAA9B;AACAG,EAAAA,OAAO,CAACK,QAAR;AAEAd,EAAAA,MAAM,CAACG,GAAP,CAAW,yBAAX,EAAsCI,OAAtC;AACD,CAlBD;;AAoBA,MAAMQ,OAAO,GAAG,CACd;AAAEjB,EAAAA,YAAF;AAAgBQ,EAAAA,UAAhB;AAA4BD,EAAAA;AAA5B,CADc,EAEd;AAAEW,EAAAA,WAAF;AAAehB,EAAAA;AAAf,CAFc,KAGX;AACH,MAAI,CAACK,KAAL,EAAY;AACV,UAAM,IAAIY,cAAJ,CACJ,6FADI,EAEJ,UAFI,CAAN;AAID;;AAED,QAAMlB,OAAO,GAAGiB,WAAW,CAACjB,OAA5B;AAEA,QAAMmB,oBAAoB,GAAGZ,UAAU,IAAI,MAA3C;AAEAT,EAAAA,eAAe,CACbC,YAAY,IAAK,GAAEoB,oBAAqB,gBAD3B,EAEbnB,OAFa,EAGbC,MAHa,CAAf;AAKAI,EAAAA,SAAS,CAACC,KAAD,EAAQa,oBAAR,EAA8BnB,OAA9B,EAAuCC,MAAvC,CAAT;AACD,CArBD;;eAuBee,O","sourcesContent":["import SemanticReleaseError from '@semantic-release/error'\nimport archiver from 'archiver'\nimport { readJsonSync, writeJsonSync } from 'fs-extra'\n\nimport { createWriteStream } from 'fs'\nimport { resolve } from 'path'\n\nimport Context, { Logger } from './@types/context'\nimport PluginConfig from './@types/pluginConfig'\n\nconst prepareManifest = (\n  manifestPath: string,\n  version: string,\n  logger: Logger,\n) => {\n  const manifest = readJsonSync(manifestPath)\n\n  writeJsonSync(manifestPath, { ...manifest, version }, { spaces: 2 })\n\n  logger.log('Wrote version %s to %s', version, manifestPath)\n}\n\nconst zipFolder = (\n  asset: string,\n  distFolder: string,\n  version: string,\n  logger: Logger,\n) => {\n  const zipPath = resolve(asset)\n  const output = createWriteStream(zipPath)\n  const archive = archiver('zip', {\n    zlib: { level: 9 },\n  })\n\n  archive.pipe(output)\n\n  archive.directory(distFolder, false)\n  archive.finalize()\n\n  logger.log('Wrote zipped file to %s', zipPath)\n}\n\nconst prepare = (\n  { manifestPath, distFolder, asset }: PluginConfig,\n  { nextRelease, logger }: Context,\n) => {\n  if (!asset) {\n    throw new SemanticReleaseError(\n      \"Option 'asset' was not included in the prepare config. Check the README.md for config info.\",\n      'ENOASSET',\n    )\n  }\n\n  const version = nextRelease.version\n\n  const normalizedDistFolder = distFolder || 'dist'\n\n  prepareManifest(\n    manifestPath || `${normalizedDistFolder}/manifest.json`,\n    version,\n    logger,\n  )\n  zipFolder(asset, normalizedDistFolder, version, logger)\n}\n\nexport default prepare\n"],"file":"prepare.js"}